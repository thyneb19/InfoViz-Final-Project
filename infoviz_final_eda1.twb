<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20194.20.0119.2058                               -->
<workbook original-version='18.1' source-build='2019.4.2 (20194.20.0119.2058)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='covid19-relative-timeline' inline='true' name='federated.110f5ly1prlcpx16zvj2a19t831u' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='covid19-relative-timeline' name='textscan.1i5qpfx194xmdx1cwqi0r1f5vhig'>
            <connection class='textscan' directory='/Users/wenqiluo/Downloads' filename='covid19-relative-timeline.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1i5qpfx194xmdx1cwqi0r1f5vhig' name='covid19-relative-timeline.csv' table='[covid19-relative-timeline#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='Province/State' ordinal='0' />
            <column datatype='string' name='Country/Region' ordinal='1' />
            <column datatype='real' name='Lat' ordinal='2' />
            <column datatype='real' name='Long' ordinal='3' />
            <column datatype='date' name='Date' ordinal='4' />
            <column datatype='integer' name='Confirmed' ordinal='5' />
            <column datatype='integer' name='Deaths' ordinal='6' />
            <column datatype='integer' name='Recovered' ordinal='7' />
            <column datatype='date' name='timestamp' ordinal='8' />
            <column datatype='integer' name='days_after_initial' ordinal='9' />
            <column datatype='integer' name='days_after_100' ordinal='10' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[covid19-relative-timeline.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Province/State</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Province/State]</local-name>
            <parent-name>[covid19-relative-timeline.csv]</parent-name>
            <remote-alias>Province/State</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country/Region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country/Region]</local-name>
            <parent-name>[covid19-relative-timeline.csv]</parent-name>
            <remote-alias>Country/Region</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Lat</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Lat]</local-name>
            <parent-name>[covid19-relative-timeline.csv]</parent-name>
            <remote-alias>Lat</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Long</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Long]</local-name>
            <parent-name>[covid19-relative-timeline.csv]</parent-name>
            <remote-alias>Long</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[covid19-relative-timeline.csv]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>4</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Confirmed</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Confirmed]</local-name>
            <parent-name>[covid19-relative-timeline.csv]</parent-name>
            <remote-alias>Confirmed</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Deaths]</local-name>
            <parent-name>[covid19-relative-timeline.csv]</parent-name>
            <remote-alias>Deaths</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Recovered</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Recovered]</local-name>
            <parent-name>[covid19-relative-timeline.csv]</parent-name>
            <remote-alias>Recovered</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>133</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[covid19-relative-timeline.csv]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <ordinal>8</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>days_after_initial</remote-name>
            <remote-type>20</remote-type>
            <local-name>[days_after_initial]</local-name>
            <parent-name>[covid19-relative-timeline.csv]</parent-name>
            <remote-alias>days_after_initial</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>days_after_100</remote-name>
            <remote-type>20</remote-type>
            <local-name>[days_after_100]</local-name>
            <parent-name>[covid19-relative-timeline.csv]</parent-name>
            <remote-alias>days_after_100</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='countd_country' datatype='integer' name='[Calculation_98727384499822592]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Country/Region])' />
      </column>
      <column caption='country&lt;32' datatype='string' name='[Calculation_98727384511975425]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF [Calculation_98727384499822592] &lt; 32 THEN &quot;Orange&quot; ELSE &quot;Blue&quot; END' />
      </column>
      <column aggregation='None' caption='China_others' datatype='string' name='[Calculation_98727384524562434]' role='dimension' semantic-role='[County].[Name]' type='nominal'>
        <calculation class='tableau' formula='IF [Country/Region] = &quot;China&quot; THEN &quot;China&quot; ELSE &quot;Others&quot; END' />
      </column>
      <column datatype='integer' name='[Confirmed]' role='measure' type='quantitative' />
      <column aggregation='None' datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Deaths]' role='measure' type='quantitative' />
      <column aggregation='Avg' datatype='real' name='[Lat]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column aggregation='Avg' datatype='real' name='[Long]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='None' datatype='string' name='[Province/State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='integer' name='[Recovered]' role='measure' type='quantitative' />
      <column aggregation='Sum' caption='Days After 100' datatype='integer' name='[days_after_100]' role='dimension' type='ordinal' />
      <column aggregation='Sum' caption='Days After Initial' datatype='integer' name='[days_after_initial]' role='dimension' type='ordinal' />
      <column caption='Timestamp' datatype='date' name='[timestamp]' role='dimension' type='ordinal' />
      <column-instance column='[Confirmed]' derivation='Sum' name='[diff:sum:Confirmed:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Calculation_98727384524562434]' derivation='None' name='[none:Calculation_98727384524562434:nk]' pivot='key' type='nominal' />
      <column-instance column='[Country/Region]' derivation='None' name='[none:Country/Region:nk]' pivot='key' type='nominal' />
      <column-instance column='[days_after_100]' derivation='None' name='[none:days_after_100:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Confirmed]' derivation='Sum' name='[sum:Confirmed:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Deaths]' derivation='Sum' name='[sum:Deaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Recovered]' derivation='Sum' name='[sum:Recovered:qk]' pivot='key' type='quantitative' />
      <group hidden='true' name='[Exclusions (China_others,Days After 100)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Calculation_98727384524562434:nk]' />
          <groupfilter function='level-members' level='[none:days_after_100:ok]' />
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='Country/Region, Province/State'>
          <field>[Country/Region]</field>
          <field>[Province/State]</field>
        </drill-path>
      </drill-paths>
      <layout dim-ordering='alphabetic' dim-percentage='0.457661' measure-ordering='alphabetic' measure-percentage='0.542339' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.110f5ly1prlcpx16zvj2a19t831u].[diff:sum:Confirmed:qk]&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Deaths:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Recovered:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Confirmed:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country/Region:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Diamond Princess&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;West Bank and Gaza&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Holy See&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Congo (Kinshasa)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Congo (Brazzaville)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Taiwan*&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;US&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='#of country_confirmed'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Number of Country with Confirmed Cases</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='covid19-relative-timeline' name='federated.110f5ly1prlcpx16zvj2a19t831u' />
          </datasources>
          <datasource-dependencies datasource='federated.110f5ly1prlcpx16zvj2a19t831u'>
            <column caption='countd_country' datatype='integer' name='[Calculation_98727384499822592]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([Country/Region])' />
            </column>
            <column caption='country&lt;32' datatype='string' name='[Calculation_98727384511975425]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_98727384499822592] &lt; 32 THEN &quot;Orange&quot; ELSE &quot;Blue&quot; END' />
            </column>
            <column aggregation='None' datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_98727384499822592]' derivation='User' name='[usr:Calculation_98727384499822592:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_98727384511975425]' derivation='User' name='[usr:Calculation_98727384511975425:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.110f5ly1prlcpx16zvj2a19t831u].[tdy:Date:qk]' field-type='quantitative' max='#2020-03-28 04:59:17.647#' min='#2020-01-17 13:10:35.294#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.110f5ly1prlcpx16zvj2a19t831u].[usr:Calculation_98727384499822592:qk]' field-type='quantitative' max='184' min='-1' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='annotation'>
            <format attr='line-end' id='annotation_6' value='arrow' />
            <format attr='line-end-size' id='annotation_6' value='large' />
            <format attr='fill-color' id='annotation_6' value='#fbf7fbce' />
            <format attr='body-type' id='annotation_6' value='box' />
            <format attr='border-style' id='annotation_6' value='solid' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.110f5ly1prlcpx16zvj2a19t831u].[usr:Calculation_98727384511975425:nk]' />
              <lod column='[federated.110f5ly1prlcpx16zvj2a19t831u].[usr:Calculation_98727384499822592:qk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='trendline'>
                <format attr='line-visibility' value='on' />
                <format attr='line-pattern-only' value='dotted' />
                <format attr='stroke-color' value='#a0cbe8ef' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.110f5ly1prlcpx16zvj2a19t831u].[usr:Calculation_98727384499822592:qk]</rows>
        <cols>[federated.110f5ly1prlcpx16zvj2a19t831u].[tdy:Date:qk]</cols>
        <annotations>
          <annotation class='point' id='6' mark-position='1' pullback='0' text-width='211'>
            <formatted-text>
              <run bold='true' fontcolor='#f9a655' fontsize='14'>From regional to worldwide</run>
              <run>Æ&#10;</run>
              <run fontcolor='#787878'>Day of Date: </run>
              <run bold='true'>&lt;[federated.110f5ly1prlcpx16zvj2a19t831u].[tdy:Date:qk]&gt;</run>
              <run>Æ&#10;</run>
              <run fontcolor='#787878'>countd_country: </run>
              <run bold='true'>&lt;[federated.110f5ly1prlcpx16zvj2a19t831u].[usr:Calculation_98727384499822592:qk]&gt;</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord axis-value='#2020-02-23 07:14:49.411#'>
                  <node-reference>
                    <axis>[federated.110f5ly1prlcpx16zvj2a19t831u].[tdy:Date:qk]</axis>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='31.330097087378647'>
                  <node-reference>
                    <axis>[federated.110f5ly1prlcpx16zvj2a19t831u].[usr:Calculation_98727384499822592:qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='-122' y='-170' />
          </annotation>
        </annotations>
      </table>
      <simple-id uuid='{6BAC96D9-75F0-4A82-BCAB-CBF1F72C29B8}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='covid19-relative-timeline' name='federated.110f5ly1prlcpx16zvj2a19t831u' />
          </datasources>
          <datasource-dependencies datasource='federated.110f5ly1prlcpx16zvj2a19t831u'>
            <column aggregation='None' caption='China_others' datatype='string' name='[Calculation_98727384524562434]' role='dimension' semantic-role='[County].[Name]' type='nominal'>
              <calculation class='tableau' formula='IF [Country/Region] = &quot;China&quot; THEN &quot;China&quot; ELSE &quot;Others&quot; END' />
            </column>
            <column datatype='integer' name='[Confirmed]' role='measure' type='quantitative' />
            <column aggregation='None' datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column aggregation='Sum' caption='Days After 100' datatype='integer' name='[days_after_100]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_98727384524562434]' derivation='None' name='[none:Calculation_98727384524562434:nk]' pivot='key' type='nominal' />
            <column-instance column='[days_after_100]' derivation='None' name='[none:days_after_100:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Confirmed]' derivation='Sum' name='[sum:Confirmed:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.110f5ly1prlcpx16zvj2a19t831u].[Exclusions (China_others,Days After 100)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:Calculation_98727384524562434:nk]' />
                <groupfilter function='level-members' level='[none:days_after_100:ok]' />
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:Calculation_98727384524562434:nk]' member='&quot;Others&quot;' />
                <groupfilter function='member' level='[none:days_after_100:ok]' member='-100' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.110f5ly1prlcpx16zvj2a19t831u].[Exclusions (China_others,Days After 100)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Confirmed:qk]</rows>
        <cols>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:days_after_100:ok]</cols>
      </table>
      <simple-id uuid='{3C7809A2-D53C-41F3-A0F8-B5C245F63580}' />
    </worksheet>
    <worksheet name='confirmed+increase # after initial'>
      <table>
        <view>
          <datasources>
            <datasource caption='covid19-relative-timeline' name='federated.110f5ly1prlcpx16zvj2a19t831u' />
          </datasources>
          <datasource-dependencies datasource='federated.110f5ly1prlcpx16zvj2a19t831u'>
            <column datatype='integer' name='[Confirmed]' role='measure' type='quantitative' />
            <column aggregation='None' datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Confirmed]' derivation='Sum' name='[diff:sum:Confirmed:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Country/Region]' derivation='None' name='[none:Country/Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Confirmed]' derivation='Sum' name='[sum:Confirmed:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Iran&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;South Korea&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;US&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.110f5ly1prlcpx16zvj2a19t831u].[diff:sum:Confirmed:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Confirmed:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.110f5ly1prlcpx16zvj2a19t831u].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.110f5ly1prlcpx16zvj2a19t831u].[diff:sum:Confirmed:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing custom-mark-size-in-axis-units='1.0' mark-alignment='mark-alignment-left' mark-sizing-setting='marks-scaling-on' use-custom-mark-size='false' />
            <encodings>
              <color column='[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Confirmed:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk] * ([federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Confirmed:qk] + [federated.110f5ly1prlcpx16zvj2a19t831u].[diff:sum:Confirmed:qk]))</rows>
        <cols>[federated.110f5ly1prlcpx16zvj2a19t831u].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{B9A88993-F2CC-4628-A021-BE4DE3A63F7E}' />
    </worksheet>
    <worksheet name='death+increase # after initial (2)'>
      <table>
        <view>
          <datasources>
            <datasource caption='covid19-relative-timeline' name='federated.110f5ly1prlcpx16zvj2a19t831u' />
          </datasources>
          <datasource-dependencies datasource='federated.110f5ly1prlcpx16zvj2a19t831u'>
            <column aggregation='None' datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Deaths]' role='measure' type='quantitative' />
            <column aggregation='Sum' caption='Days After Initial' datatype='integer' name='[days_after_initial]' role='dimension' type='ordinal' />
            <column-instance column='[Deaths]' derivation='Sum' name='[diff:sum:Deaths:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Deaths]' derivation='Sum' name='[diff:win:sum:Deaths:qk]' pivot='key' type='quantitative'>
              <table-calc aggregation='Avg' from='-3' ordering-type='Rows' to='3' type='WindowTotal' window-options='IncludeCurrent' />
              <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Country/Region]' derivation='None' name='[none:Country/Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[days_after_initial]' derivation='None' name='[none:days_after_initial:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Deaths]' derivation='Sum' name='[sum:Deaths:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Iran&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;South Korea&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;US&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' domain-expand='false' field='[federated.110f5ly1prlcpx16zvj2a19t831u].[diff:win:sum:Deaths:qk]' field-type='quantitative' max='1357' min='0' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Deaths:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]' />
              <lod column='[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Deaths:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.110f5ly1prlcpx16zvj2a19t831u].[diff:win:sum:Deaths:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]' />
              <path column='[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Deaths:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.110f5ly1prlcpx16zvj2a19t831u].[diff:sum:Deaths:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]' />
              <path column='[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Deaths:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Deaths:qk] + ([federated.110f5ly1prlcpx16zvj2a19t831u].[diff:sum:Deaths:qk] + [federated.110f5ly1prlcpx16zvj2a19t831u].[diff:win:sum:Deaths:qk]))</rows>
        <cols>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:days_after_initial:ok]</cols>
      </table>
      <simple-id uuid='{8DAD0091-162F-45A6-8E4F-850C459EBEC5}' />
    </worksheet>
    <worksheet name='worldwide_summation'>
      <layout-options>
        <title>
          <formatted-text>
            <run>worldwide_summation&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='covid19-relative-timeline' name='federated.110f5ly1prlcpx16zvj2a19t831u' />
          </datasources>
          <datasource-dependencies datasource='federated.110f5ly1prlcpx16zvj2a19t831u'>
            <column datatype='integer' name='[Confirmed]' role='measure' type='quantitative' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Deaths]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Recovered]' role='measure' type='quantitative' />
            <column-instance column='[Confirmed]' derivation='Sum' name='[sum:Confirmed:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Deaths]' derivation='Sum' name='[sum:Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Recovered]' derivation='Sum' name='[sum:Recovered:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.110f5ly1prlcpx16zvj2a19t831u].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Confirmed:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Deaths:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Recovered:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.110f5ly1prlcpx16zvj2a19t831u].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.110f5ly1prlcpx16zvj2a19t831u].[Multiple Values]' scope='rows' value='# of cases' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.110f5ly1prlcpx16zvj2a19t831u].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.110f5ly1prlcpx16zvj2a19t831u].[Multiple Values]</rows>
        <cols>[federated.110f5ly1prlcpx16zvj2a19t831u].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{64ECA6E3-5AC9-444D-A7C2-F197756A8E43}' />
    </worksheet>
    <worksheet name='worldwide_summation/cntry'>
      <layout-options>
        <title>
          <formatted-text>
            <run>worldwide_summation&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='covid19-relative-timeline' name='federated.110f5ly1prlcpx16zvj2a19t831u' />
          </datasources>
          <datasource-dependencies datasource='federated.110f5ly1prlcpx16zvj2a19t831u'>
            <column datatype='integer' name='[Confirmed]' role='measure' type='quantitative' />
            <column aggregation='None' datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Deaths]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Recovered]' role='measure' type='quantitative' />
            <column-instance column='[Country/Region]' derivation='None' name='[none:Country/Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Confirmed]' derivation='Sum' name='[sum:Confirmed:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Deaths]' derivation='Sum' name='[sum:Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Recovered]' derivation='Sum' name='[sum:Recovered:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.110f5ly1prlcpx16zvj2a19t831u].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Confirmed:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Deaths:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Recovered:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;South Korea&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;US&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.110f5ly1prlcpx16zvj2a19t831u].[:Measure Names]</column>
            <column>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.110f5ly1prlcpx16zvj2a19t831u].[Multiple Values]' scope='rows' value='# of cases' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.110f5ly1prlcpx16zvj2a19t831u].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk] * [federated.110f5ly1prlcpx16zvj2a19t831u].[Multiple Values])</rows>
        <cols>[federated.110f5ly1prlcpx16zvj2a19t831u].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{F1CF3B88-0031-4ADE-BA49-A719C345C244}' />
    </worksheet>
    <worksheet name='worldwide_summation/cntry (3)'>
      <layout-options>
        <title>
          <formatted-text>
            <run>worldwide_summation&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='covid19-relative-timeline' name='federated.110f5ly1prlcpx16zvj2a19t831u' />
          </datasources>
          <datasource-dependencies datasource='federated.110f5ly1prlcpx16zvj2a19t831u'>
            <column datatype='integer' name='[Confirmed]' role='measure' type='quantitative' />
            <column aggregation='None' datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Deaths]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Recovered]' role='measure' type='quantitative' />
            <column-instance column='[Country/Region]' derivation='None' name='[none:Country/Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Confirmed]' derivation='Sum' name='[sum:Confirmed:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Deaths]' derivation='Sum' name='[sum:Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Recovered]' derivation='Sum' name='[sum:Recovered:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;US&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Confirmed:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Deaths:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]' />
            </encodings>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Recovered:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Confirmed:qk] + ([federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Deaths:qk] + [federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Recovered:qk]))</rows>
        <cols>[federated.110f5ly1prlcpx16zvj2a19t831u].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{F2A54F4F-9BE6-4563-A190-C511B5AA83C8}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='#of country_confirmed'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.110f5ly1prlcpx16zvj2a19t831u].[usr:Calculation_98727384511975425:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[usr:Calculation_98727384511975425:nk]</field>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E74137C5-2BBD-47DE-B828-2D21B423B188}' />
    </window>
    <window class='worksheet' name='worldwide_summation'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.110f5ly1prlcpx16zvj2a19t831u].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[:Measure Names]</field>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{EFC07FA5-8504-4D78-9B38-D73CA0B2AE02}' />
    </window>
    <window class='worksheet' name='worldwide_summation/cntry'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.110f5ly1prlcpx16zvj2a19t831u].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[:Measure Names]</field>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]</field>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{93C23149-057A-49E3-A133-8CE881EBD5B7}' />
    </window>
    <window class='worksheet' name='worldwide_summation/cntry (3)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]</field>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{568EA138-3C87-492C-8107-6C63C8D46693}' />
    </window>
    <window class='worksheet' name='confirmed+increase # after initial'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='4' param='[federated.110f5ly1prlcpx16zvj2a19t831u].[:Measure Names]' type='color' />
            <card pane-specification-id='5' param='[federated.110f5ly1prlcpx16zvj2a19t831u].[sum:Confirmed:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]</field>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:days_after_initial:ok]</field>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0DC02C6C-5DC3-407F-87BF-FFD0650463C0}' />
    </window>
    <window class='worksheet' name='death+increase # after initial (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='title' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]</field>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:days_after_initial:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{72187AFD-6B9E-44D2-95DD-8740539DDE0F}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Calculation_98727384524562434:nk]</field>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:Country/Region:nk]</field>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:days_after_100:ok]</field>
            <field>[federated.110f5ly1prlcpx16zvj2a19t831u].[none:days_after_initial:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{2021E0FA-A5D7-49F9-BBA6-4A7A79510060}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='#of country_confirmed' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      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
      y+rvsluM1PmdyBKr961wWgCVxoAbm9lIXaUTi8mw2u6xW6j02GgMuLGaDNRXunDZzKu1eF1W
      AhV2GgNuLCYDDVUuko/0xY59ua9LfXGTyysP+uJ34rA+6MvegAdV01bba3wOHLblvjit5ArK
      I32t9tpxLbdXOC1I8Eh7oMKOy25e6ovDTNqzVKvVvNQXp9W0el+33UKgwrbal/oqF8n0g75U
      VdipcFppDLgxm2Qaq5b65Fje1w/2vxP7Q32Sl593h9VIjc9BoaCs3tfrspDNLT8/ViO1fieS
      xOo2rWYjle6lmmwWA3uWn5+VdpfdTNXK82M2sKfKidNmeuT5sZmND15ry8+PpGlb95egqqqu
      hkCSpNXbsiyjqurqwgWKomAwGNZtf/j20/7v87Sv1CfL8rrtz1Prs7TD0kIOG+3LRvv6cK3r
      tRfbJ6Wu/+FtSZL0xL56nudnSwPwuIef9MdvP+3/Hm9f+R3P2v74/33ex2+k1lL3db2+lLKv
      z7IvVjxvfeXa/2UNgCCUW9mvBVqhFTLcuX2XlGrg/LlWLMvrOa1nYqiX+5FZZKuPC2eOs96f
      EiRjc3T3j3LmhVbCYwOMh2apazrM/roiS/xoCmODveQtfhr9Fm6395JJZzn54heodJqe/hBV
      ob+7ndnFNEeOnyQ02Es8XeDU+fO4ikwtnorP0t7Vh9nho9ZrZux+hFTBxFcvnlvzMWohw622
      m2QlM62tLfR23COvWTnTegqLae39ODHYw0R4lj37jpCen2QhnsLuq+fMseIra+ZSMboGJjh+
      ZD8ddztRDRbOtJ7BbFh75y9MjzOdlKkwZRl9hj6BxlDnXSKLGZqPnGDu/hBzsQxHT5/BX+S6
      sXwmyc1Pb2DyBNhf62JgZJJUTubiKxcwG5886bl9LoeWZI6easWaTZLMKc/8sMbmoxxv3ovJ
      bIFn+DsaDRk1nUEBvIF6zpw4SCi4/ilak8VOYiGKxenjpZdfwmww4LEXf/9oOHCUfVUuwpEF
      mo6cpM4Bs8niqzcaLQ5az79IPHSfyvpmWk8cxG4r/mehksHMyRdaseZixPMyx0+/gFFLkkjn
      iz6ubl8zR/bVMT01x7GTreyv9mB3rj8vaE9n19IajLKJE2dewJSNksivPbuEmkvRPRxGyiWp
      bXy2PmmaSmgqSvPhYwS8DhqajtIUcBCJJoo+Lr04Q0H2cuLYISprGjl/9hRW09KH4afZNgGQ
      ZAM9d69hq2vGa3v6u+paBofGOHhw/7O8/nF6KrCZDWhAKhrm2s1+zrW2rFOcAb/fuzq6LEwO
      4qxtxlRkRRpJkpka72F8wcCx5gYm+u8yb6hkn7f4Va+SmufKh7/myIsvY5ZhqH+I5kNPn9pk
      9TFITE2MEMvlkDSVrs+u4KhtxucqvmaXkkvS2T+B2WoEtcDARIyDDcXXcosGBwgmZZLzEdLZ
      PPfaPsa99wRey9ojTW/7HYwOB+HpMLmCyuAz9AlkTpw9QXiij5udY4TH+hiLSRyqL74Yn6Oi
      hqZ9FXzw3iXSKkwM9FJ/8AjyGocG2yYA2flJuseixGanSBV5N3lcIRUhY6zEXeQJeFhofJjB
      kRH6B0a5efM2ZquBsfHiI4BaSNPZ0clgfx/ziykGx2c51FR8niIlm+B2+wBaIU5kZorP2kfI
      JWaZjWeKPm5ioJNYXiY4PkZByTCblKnyWIs+Jp9eYDIcxyBLRCZGGIkkWQgHSa+zoMXI0BAW
      h5lMKkVkbJDAgcNrvlBW2Pz1nDvRhN1uJz47yWgkwezUJKki29p7pIWmukpsdhuylmXuGfqE
      pjIxPEQ0vojZXKDtbh9SPkF4tvhqo8mFOUYnQ0iyEVnLMTlfYG/Aueb9/z8VrnodWE/JtQAA
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='confirmed+increase # after initial' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='death+increase # after initial (2)' width='192'>
      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
      QmCC
    </thumbnail>
    <thumbnail height='192' name='worldwide_summation' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='worldwide_summation/cntry' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='worldwide_summation/cntry (3)' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
